==============Lesson 33. Project Introduction
==============Lesson 34. MongoDB Atlas Setup
we will build our custom api
mongodb: you can install it or use mongodb atlas
mongodb atlas: create Project
               create cluster (free)
once OK: create db user & access IP@ 

next lesson: we install all dependencies

==============Lesson 35. Dependencies & Basic Express Server
*********
npm init -y 
npm i express bcryptjs jsonwebtoken config express-validator mongoose
npm i -D nodemon concurrently 

  "scripts":
    "start": "node server.js"
    "server": "nodemon server.js"

touch server.js 
*********

postman (because we haven't react app)
npm init -y 

1.regular dependencies:
npm i express bcryptjs jsonwebtoken config express-validator mongoose
express ->  handle routing (endpoints)
bcryptjs -> encrypt password 
jsonwebtoken -> to access protectif route
config  -> for global variables 
express-validator -> to validate any body data that is comme in. ex: user has to have email 
mongoose ->  ddeal with db & create models

2.dept dependencies:
npm i -D nodemon concurrently 
nodemon -> keep watching the server
concurrently -> run our backent in react frontend at the same time 

package.json:
  "scripts":
    "start": "node server.js" -> used for deployement 
    "server": "nodemon server.js" -> for dev env (npm run server)

server.js -> entrypoint to our backend 

next lesson we create routes, but in seperate files (users, contacts & auth)

==============Lesson 36. Backend Routes
routes/auth.js -> login a user and get token (route), get logged in user (route) 
routes/contacts.js -> CRUD, each context is spÃ©cific to user 
routes/users.js -> register route 

server.js:
app.use('/api/users', require('./routes/users')) -> when you hit "/api/users" then it forward it to "/api/users"
...

/routes/users
we want to add signature for each route to what is going on 
...

then, you should use postman to test them 

next video we start to implement our db.

==============Lesson 37. Connect MongoDB To Our App
create ./config/default.json -> for global variable, ex: mongoURI: connection string 
create ./config/db.js -> here we use mongoose to connect to db

Next lesson we add functionnalities to register our user


==============Lesson 38. User Model & Validation
we have to create: contact & user model

models/User.js -> we create a schema : name, email, password, date 
include user model into route/users.js
to use res.send(req.body) -> you have to add a piece of middleware to server.js
use express-validator to validate your input 

next lesson we get the intercept the data, hash password, put it in db and return jsonwebtoken

==============Lesson 39. Hash Passwords & Register Route
dealing with db and bcrypt returns Promises
check if user exists with email (findOne({anyAtt}))

400 -> bad request 
500 -> server error

salt represents a key.

next lesson we want to return jwt to client to access protected route

==============Lesson 40. Create & Respond With JSON Web Token
when we register (or login) a user, we want to respond with jwt with some payload
the payload in our case is user.id, because with that id we can access to all contacts
user.id <==> user._id
*********
const payload = { user: {id: user.id}}
jwt.sign(payload, config.get('jwtSecret'),{expiresIn: 3600}, (err, token) => if err throw token; res.json({token})) -> takes 4 params
config/default.json: "jwtSeceret": "Secert"
*********
NB: we need to create a piece of middleware, that check the token that sent in the header then extract the id 

next lesson we implement login user


==============Lesson 41. Authenticate Route
routes/auth.js: post (try to copy paste from users.js)

Postman: use collection to store requests

next: 
we create a piece of middelware to validate the token and pull  out the user.id  (add it to our request object to get all contacts )
we create a piece of middelware to validate token and to access protected routes.


==============Lesson 42. Auth Middleware & Protecting Routes
we need to create middleware to send the token within the header when we want to access protected routes (for instance: to view the user's contacts)

middleware just a function having access to request and response cycle and request and response object, 
so, if we hit endpoint then we fireoff the middleware, and we need to check if there is a token in the header  

all middleware function have next input.
next input: move to next middleware after yo do what you want to do.
401: anauthorized 

middleware/auth.js: jwt & config & module.exports = function(req, res, next){
...
}

all private route, we need to bring up middleware

next lesson we implement contacts (private route) because they are specific to user.


==============Lesson 43. Contact Model & Get Contacts Route
create Contact model having user att (to get all contacts with that user)
routes/contact.js: implement get methode
test with post man -> get empty list

next lesson we add contact to specific user

==============Lesson 44. Add Contact Route
routes/contact.js: implement post methode (same as users.js: post)
we see the relation between User and contacts


==============Lesson Contact Update & Delete Routes
Update:
create contactFields object to get filled input from user
try find contact by id ? 
no -> return 404
yes -> check if this contact belongs to the user 
       no -> return 401
       yes -> findByIdAndUpdate & retrun contact

Delete: 
try find contact by id ? 
no -> return 404
yes -> check if this contact belongs to the user 
       no -> return 401
       yes -> findByIdAndRemove & return 'contact removed'



==============Lesson 45. Setup React & Concurrently
concurrently: to run backend & frontend server at the same terminal 

npx create-react-app client 

backend: package.json: "client": "npm start --prefix client" -> start a client server
                       "clientinstall": "npm install --prefix client" -> install dependencies of client
                       "dev": "concurrently \"npm run server\" \"npm run client\"" -> run server and client
client: package.json: (last element):
"proxy": "http://localhost:5000" -> to avoid it when using axios


next lesson we start to work with react


==============Lesson 46. Cleanup, Navbar & Router Setup
rm client/{.gitignore,README} -> because we have one in backend
cd client && rm -rf .git 


client : install dependecies -> npm i axios react-router-dom uuid react-transition-group 
uuid -> id generator 
react-transition-group -> animation 

cp App.css client/src/App.css

clean up:
rm src/{logo.svg,serviceWorker.js,index.css,App.test.js}
index.js -> remove unnecessary files
App.js -> transform to arrow function

public/index.html: remove comment & change the title, copy from fontawsome



create Navbar:
mkdir src/components/layout/Navbar.js: function with {icon, title} as input & propsTypes & defaultProps
App.js : import Navbar, Router, Route, Switch Fragament
App.js: replace div with Fragment
App.js: create Routes to Home & About
App.js: within div container create switch and its Routes to Home and About 
App.js: import Home and Abou from components/pages/ 
App.js: test if routes functianl : / & /about
Navbar.js: create navigation Link  

Next lesson we start to create our contact context

==============Lesson 47. Contacts Context & Global State
we have contacts for context (in this lesson)
we have contacts for alert
we have contacts for authentification

we work with dummy data then with api.

mkdir client/src/context/types.js -> 4.15 OK
mkdir client/src/context/contact/contactContext.js -> 2.30 OK
mkdir client/src/context/contact/ContactState.js -> 5.02, 5.34, 7.40OK, 8.52, 9.39
mkdir client/src/context/contact/contactReducer.js

ContactState.js: useReducer hook to acess to state and use dispatch to reducer 
                  state -> to access anything in our state
                  dispatch -> to dispatch object to reducer



==============Lesson 48. Contacts & ContactItem Components
Now we can acces to state & action of ContactState from any component
touch client/src/components/contacts/Contacts.js
touch client/src/components/contacts/ContactItem.js

Contacts.js: 3.19: import contactContext
                   create object with userContext hook (to get the state)
                   destructor it and loop through them
Home.js: 4:29: import Contact OK
               return grid of 2, one for form and the 2nd for <Contact />

Contacts.js : 3.19 implement basic Contact OK
ContactItem.js: 8.26 implement ContactItem OK
Contacts.js : 9.15 import contactItem OK
ContactItem.js: 10.38: we want 'professional' or 'personal' with capital (in client not in db ) OK
ContactItem.js: 12:12: add email and phone OK 
ContactItem.js: 13:00: add edit and delete buttons + proptype


next we create a form to add our contact.


==============Lesson 49. ContactForm Component
touch client/src/components/contacts/ContactForm.js
ContactForm.js : 2.14 : contactform state OK 
ContactForm.js : 3.26 : contactform form: name input 
ContactForm.js : 6.10 : contactform form: radio 
ContactForm.js : 7.50 : onChange() 
Home: 8.13: import ContactForm
ContactForm.js : 10.47 : define onSubmit()
ContactState.js : 13.55 : define addContact() : the contact comes in and immediatly send to payload
contactReducer.js: 13.50 add function to receive addContact() 

Next we define Delete button
==============Lesson 50. Delete Contact From UI
contactItem.js:  2.52: import contactcontext to use deleteItem
contactReducer.js: 4.51: we used filter 
contactState.js: 5.06 add deleteContact to value, because we provide this function to our components



Next lesson we work on Edit button

==============Lesson 51.